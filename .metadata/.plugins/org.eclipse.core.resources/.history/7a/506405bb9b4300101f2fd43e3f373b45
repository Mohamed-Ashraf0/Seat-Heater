/**
 * main.c
 */
#include "FreeRTOS.h"
#include "task.h"
#include "event_groups.h"
#include "semphr.h"
#include "timers.h"
#include "stream_buffer.h"
#include <stdint.h>
#include "uart0.h"
#include "adc0-1.h"
#include "GPTM.h"
#include "GPIO.h"

/**
 * @brief Functions that implement FreeRTOS tasks.
 */
static void prvReaderTask( void * pvParams );
static void prvWriterTask( void * pvParams );
/*-----------------------------------------------------------*/

/**
 * @brief Stream buffer used in this program.
 */
static StreamBufferHandle_t xStreamBuffer = NULL;
/*-----------------------------------------------------------*/

/**
 * @brief Tutorial entry point.
 */
int main(void)
{
    UART0_Init();
    BaseType_t xTaskCreationResult = pdFAIL;

    xTaskCreationResult = xTaskCreate( prvReaderTask,
                                       "Reader",
                                       configMINIMAL_STACK_SIZE,
                                       NULL,
                                       tskIDLE_PRIORITY + 1,
                                       NULL );
    configASSERT( xTaskCreationResult == pdPASS );

    xTaskCreationResult = xTaskCreate( prvWriterTask,
                                       "Writer",
                                       configMINIMAL_STACK_SIZE,
                                       NULL,
                                       tskIDLE_PRIORITY,
                                       NULL );
    configASSERT( xTaskCreationResult == pdPASS );

    /*
     * TODO 1 - Create a stream buffer of size 10 using xStreamBufferCreate API.
     *
     * Use the following values for xStreamBufferCreate parameters:
     * xBufferSizeBytes     10
     * xTriggerLevelBytes   5
     *
     * Assign the return value to xStreamBuffer.
     */
    xStreamBuffer=xStreamBufferCreate(10,5);
    configASSERT( xStreamBuffer != NULL );

        vTaskStartScheduler();

    for(;;) {} // Should never reach here
}
/*-----------------------------------------------------------*/

static void prvReaderTask( void * pvParams )
{
    uint8_t ucRxData[ 5 ];
    size_t i, uxReceivedBytes;
    /* Silence warning about unused parameters. */
    ( void ) pvParams;

    for( ;; )
    {
        /*
         * TODO 2 - Read data from the steam buffer using xStreamBufferReceive
         * API.
         *
         * Use the following values for xStreamBufferReceive parameters:
         * xStreamBuffer        xStreamBuffer
         * pvRxData             &( ucRxData[ 0 ] )
         * xBufferLengthBytes   5
         * xTicksToWait         portMAX_DELAY
         *
         * Assign the return value to uxReceivedBytes.
         */

        uxReceivedBytes=xStreamBufferReceive(xStreamBuffer,ucRxData,5,portMAX_DELAY);
        UART0_SendString( "Received %lu byte(s)...\r\n", uxReceivedBytes );

        for( i = 0; i < uxReceivedBytes; i++ )
        {
            UART0_SendString("0x%0X ", ucRxData[ i ] );
        }

        UART0_SendString( "\r\n" );
    }
}
/*-----------------------------------------------------------*/

static void prvWriterTask( void * pvParams )
{
    uint8_t ucTxData[ 6 ] = { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6 };
    size_t uxSentBytes;

    /* Silence warning about unused parameters. */
    ( void ) pvParams;
    TickType_t xLastWakeTime = xTaskGetTickCount();
    for( ;; )
    {
        UART0_SendString("Sending 1 byte...\r\n" );

        /*
         * TODO 3 - Send 1 byte to the stream buffer using xStreamBufferSend
         * API.
         *
         * Use the following values for xStreamBufferSend parameters:
         * xStreamBuffer        xStreamBuffer
         * pvTxData             &( ucTxData[ 0 ] )
         * xDataLengthBytes     1
         * xTicksToWait         portMAX_DELAY
         *
         * Assign the return value to uxSentBytes.
         */
        uxSentBytes=xStreamBufferSend(xStreamBuffer,ucTxData,1,portMAX_DELAY);
        configASSERT( uxSentBytes == 1 );

        UART0_SendString( "Sending 5 bytes...\r\n" );

        /*
         * TODO 4 - Send 5 bytes to the stream buffer using xStreamBufferSend
         * API.
         *
         * Use the following values for xStreamBufferSend parameters:
         * xStreamBuffer        xStreamBuffer
         * pvTxData             &( ucTxData[ 1 ] )
         * xDataLengthBytes     5
         * xTicksToWait         portMAX_DELAY
         *
         * Assign the return value to uxSentBytes.
         */
        uxSentBytes=xStreamBufferSend(xStreamBuffer,&( ucTxData[ 1 ],5,portMAX_DELAY);
        configASSERT( uxSentBytes == 5 );

        UART0_SendString("Finished sending data.\r\n" );

        vTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS( 1000 ) );

    }
}
/*-----------------------------------------------------------*/
void ADC0SS0_HANDLER(void) {}
void ADC1SS0_HANDLER(void) {}
void GPIOPortF_Handler(void) {}
