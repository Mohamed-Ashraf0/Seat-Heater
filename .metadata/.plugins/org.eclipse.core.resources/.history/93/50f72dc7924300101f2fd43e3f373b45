/**
 * main.c
 */
#include "FreeRTOS.h"
#include "task.h"
#include "event_groups.h"
#include "semphr.h"
#include "timers.h"
#include <stdint.h>
#include "uart0.h"
#include "adc0-1.h"
#include "GPTM.h"
#include "GPIO.h"

/**
 * @brief Definitions of event bits in the event group.
 */
#define TASK_1_BIT ( 1UL << 0UL )
#define TASK_2_BIT ( 1UL << 1UL )
#define TASK_3_BIT ( 1UL << 2UL )
/*-----------------------------------------------------------*/

/**
 * @brief Functions that implement FreeRTOS tasks.
 */
static void prvTask1( void * pvParams );
static void prvTask2( void * pvParams );
static void prvTask3( void * pvParams );
/*-----------------------------------------------------------*/

/**
 * @brief Event group used in this program.
 */
static EventGroupHandle_t xEventGroup = NULL;
/*-----------------------------------------------------------*/

/**
 * @brief Tutorial entry point.
 */
int main(void)
{
    UART0_Init();
    BaseType_t xTaskCreationResult = pdFAIL;

      xTaskCreationResult = xTaskCreate( prvTask1,
                                         "Task1",
                                         configMINIMAL_STACK_SIZE,
                                         NULL,
                                         tskIDLE_PRIORITY,
                                         NULL );
      configASSERT( xTaskCreationResult == pdPASS );

      xTaskCreationResult = xTaskCreate( prvTask2,
                                         "Task2",
                                         configMINIMAL_STACK_SIZE,
                                         NULL,
                                         tskIDLE_PRIORITY,
                                         NULL );
      configASSERT( xTaskCreationResult == pdPASS );

      xTaskCreationResult = xTaskCreate( prvTask3,
                                         "Task3",
                                         configMINIMAL_STACK_SIZE,
                                         NULL,
                                         tskIDLE_PRIORITY,
                                         NULL );
      configASSERT( xTaskCreationResult == pdPASS );

    xEventGroup=xEventGroupCreate ();
    configASSERT( xEventGroup != NULL );
        vTaskStartScheduler();

    for(;;) {} // Should never reach here
}
static void prvTask1( void * pvParams )
{
    /* Silence warning about unused parameters. */
    ( void ) pvParams;
    TickType_t xLastWakeTime = xTaskGetTickCount();
    for( ;; )
    {
        UART0_SendString("Task 1 reached sync point.\r\n" );

        /*
         * TODO 2 - Synchronize using xEventGroupSync API.
         *
         * Use the following values for xEventGroupSync parameters:
         * xEventGroup      xEventGroup
         * uxBitsToSet      TASK_1_BIT
         * uxBitsToWaitFor  ( TASK_1_BIT | TASK_2_BIT | TASK_3_BIT )
         * xTicksToWait     portMAX_DELAY
         */
        xEventGroupSync(xEventGroup,TASK_1_BIT,( TASK_1_BIT | TASK_2_BIT | TASK_3_BIT ),portMAX_DELAY);

        UART0_SendString( "Task 1 exited sync point.\r\n" );

        vTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS( 1000 ) );

    }
}
/*-----------------------------------------------------------*/

static void prvTask2( void * pvParams )
{
    /* Silence warning about unused parameters. */
    ( void ) pvParams;
    TickType_t xLastWakeTime = xTaskGetTickCount();
    for( ;; )
    {
        UART0_SendString( "Task 2 reached sync point.\r\n" );

        /*
         * TODO 3 - Synchronize using xEventGroupSync API.
         *
         * Use the following values for xEventGroupSync parameters:
         * xEventGroup      xEventGroup
         * uxBitsToSet      TASK_2_BIT
         * uxBitsToWaitFor  ( TASK_1_BIT | TASK_2_BIT | TASK_3_BIT )
         * xTicksToWait     portMAX_DELAY
         */

        xEventGroupSync(xEventGroup,TASK_2_BIT,( TASK_1_BIT | TASK_2_BIT | TASK_3_BIT ),portMAX_DELAY);
        UART0_SendString( "Task 2 exited sync point.\r\n" );

        vTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS( 1000 ) );
    }
}
/*-----------------------------------------------------------*/

static void prvTask3( void * pvParams )
{
    /* Silence warning about unused parameters. */
    ( void ) pvParams;
    TickType_t xLastWakeTime = xTaskGetTickCount();
    for( ;; )
    {
        UART0_SendString( "Task 3 reached sync point.\r\n" );

        /*
         * TODO 4 - Synchronize using xEventGroupSync API.
         *
         * Use the following values for xEventGroupSync parameters:
         * xEventGroup      xEventGroup
         * uxBitsToSet      TASK_3_BIT
         * uxBitsToWaitFor  ( TASK_1_BIT | TASK_2_BIT | TASK_3_BIT )
         * xTicksToWait     portMAX_DELAY
         */

        xEventGroupSync(xEventGroup,TASK_3_BIT,( TASK_1_BIT | TASK_2_BIT | TASK_3_BIT ),portMAX_DELAY);
        UART0_SendString("Task 3 exited sync point.\r\n" );

        vTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS( 1000 ) );
    }
}
/*-----------------------------------------------------------*/
void ADC0SS0_HANDLER(void) {}
void ADC1SS0_HANDLER(void) {}
void GPIOPortF_Handler(void) {}
