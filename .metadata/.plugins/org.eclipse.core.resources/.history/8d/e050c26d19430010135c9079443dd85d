/**
 * main.c
 */
#include "FreeRTOS.h"
#include "task.h"
#include "event_groups.h"
#include "semphr.h"
#include <stdint.h>
#include "uart0.h"
#include "adc0-1.h"
#include "GPTM.h"
#include "GPIO.h"

/* Static allocation for application task */
static void prvTaskFunction( void * pvParams );

int main(void)
{
    UART0_Init();
    BaseType_t xTaskCreationResult = pdFAIL;
    xTaskCreationResult=xTaskCreate(
            prvTaskFunction,
            "Task1",
            configMINIMAL_STACK_SIZE,
            ( void * ) 1,
            tskIDLE_PRIORITY,
            NULL);
    configASSERT(xTaskCreationResult == pdPASS );
    xTaskCreationResult=xTaskCreate(
                prvTaskFunction,
                "Task2",
                configMINIMAL_STACK_SIZE,
                ( void * ) 2,
                tskIDLE_PRIORITY,
                NULL);
        configASSERT(xTaskCreationResult == pdPASS );
    vTaskStartScheduler();

    for(;;) {} // Should never reach here
}

static void prvTaskFunction( void * pvParams )
{
    (void)pvParams;
    TickType_t xLastWakeTime = xTaskGetTickCount();
    for(;;) {
        UART0_SendNumber((uint32_t)pvParams));
        UART0_SendString(" \r\n\n**************************************\r\n\n");
        vTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS( 1000 ) );
    }
}



void ADC0SS0_HANDLER(void) {}
void ADC1SS0_HANDLER(void) {}
void GPIOPortF_Handler(void) {}
