/**
 * main.c
 */
#include "FreeRTOS.h"
#include "task.h"
#include "event_groups.h"
#include "semphr.h"
#include "timers.h"
#include <stdint.h>
#include "uart0.h"
#include "adc0-1.h"
#include "GPTM.h"
#include "GPIO.h"

/**
 * @brief Definitions of event bits in the event group.
 */
#define EVENT_1_BIT ( 1UL << 0UL )
#define EVENT_2_BIT ( 1UL << 1UL )
/*-----------------------------------------------------------*/

/**
 * @brief Functions that implement FreeRTOS tasks.
 */
static void prvEventGeneratorTask( void * pvParams );
static void prvEventHandlerTask1( void * pvParams );
static void prvEventHandlerTask2( void * pvParams );
/*-----------------------------------------------------------*/

/**
 * @brief Event group used in this program.
 */
static EventGroupHandle_t xEventGroup = NULL;
/*-----------------------------------------------------------*/

/**
 * @brief Tutorial entry point.
 */
int main(void)
{
    UART0_Init();
    BaseType_t xTaskCreationResult = pdFAIL;

    xTaskCreationResult = xTaskCreate( prvEventGeneratorTask,
                                       "Generator",
                                       configMINIMAL_STACK_SIZE,
                                       NULL,
                                       tskIDLE_PRIORITY,
                                       NULL );
    configASSERT( xTaskCreationResult == pdPASS );

    xTaskCreationResult = xTaskCreate( prvEventHandlerTask1,
                                       "Handler1",
                                       configMINIMAL_STACK_SIZE,
                                       NULL,
                                       tskIDLE_PRIORITY + 1,
                                       NULL );
    configASSERT( xTaskCreationResult == pdPASS );

    xTaskCreationResult = xTaskCreate( prvEventHandlerTask2,
                                       "Handler2",
                                       configMINIMAL_STACK_SIZE,
                                       NULL,
                                       tskIDLE_PRIORITY + 2,
                                       NULL );
    configASSERT( xTaskCreationResult == pdPASS );
    xEventGroup=xEventGroupCreate ();
    configASSERT( xEventGroup != NULL );
        vTaskStartScheduler();

    for(;;) {} // Should never reach here
}
/*-----------------------------------------------------------*/

static void prvEventGeneratorTask( void * pvParams )
{
    /* Silence warning about unused parameters. */
    ( void ) pvParams;
    TickType_t xLastWakeTime = xTaskGetTickCount();

    for( ;; )
    {
        UART0_SendString("Generating event 1...\r\n");
        /*
         * TODO 2 - Set EVENT_1_BIT in the event group using xEventGroupSetBits
         * API.
         *
         * Use the following values for xEventGroupSetBits parameters:
         * xEventGroup  xEventGroup
         * uxBitsToSet  EVENT_1_BIT
         */
        xEventGroupSetBits(xEventGroup,EVENT_1_BIT);

        vTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS( 500 ) );

        UART0_SendString("Generating event 2...\r\n" );

        /*
         * TODO 3 - Set EVENT_2_BIT in the event group using xEventGroupSetBits
         * API.
         *
         * Use the following values for xEventGroupSetBits parameters:
         * xEventGroup  xEventGroup
         * uxBitsToSet  EVENT_2_BIT
         */
        xEventGroupSetBits(xEventGroup,EVENT_2_BIT);

        UART0_SendString("Generated both the events...\r\n" );

        vTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS( 500 ) );
    }
}
/*-----------------------------------------------------------*/

static void prvEventHandlerTask1( void * pvParams )
{
    EventBits_t xEventBitsValue;

    /* Silence warning about unused parameters. */
    ( void ) pvParams;

    for( ;; )
    {
        /*
         * TODO 4 - Wait for events using xEventGroupWaitBits API.
         *
         * Use the following values for xEventGroupWaitBits parameters:
         * xEventGroup      xEventGroup
         * uxBitsToWaitFor  ( EVENT_1_BIT | EVENT_2_BIT )
         * xClearOnExit     pdTRUE
         * xWaitForAllBits  pdTRUE
         * xTicksToWait     portMAX_DELAY
         *
         * Assign the return value to xEventBitsValue.
         */
        xEventBitsValue=xEventGroupWaitBits(xEventGroup,( EVENT_1_BIT | EVENT_2_BIT ),pdTRUE,pdTRUE,portMAX_DELAY);

        if( ( xEventBitsValue & EVENT_1_BIT ) != 0 )
        {
            UART0_SendString("Handler Task 1: Handling  event 1...\r\n" );
        }
        if( ( xEventBitsValue & EVENT_2_BIT ) != 0 )
        {
            UART0_SendString("Handler Task 1: Handling  event 2...\r\n" );
        }
    }
}
/*-----------------------------------------------------------*/

static void prvEventHandlerTask2( void * pvParams )
{
    EventBits_t xEventBitsValue;

    /* Silence warning about unused parameters. */
    ( void ) pvParams;

    for( ;; )
    {
        /*
         * TODO 5 - Wait for events using xEventGroupWaitBits API.
         *
         * Use the following values for xEventGroupWaitBits parameters:
         * xEventGroup      xEventGroup
         * uxBitsToWaitFor  ( EVENT_1_BIT | EVENT_2_BIT )
         * xClearOnExit     pdTRUE
         * xWaitForAllBits  pdTRUE
         * xTicksToWait     portMAX_DELAY
         *
         * Assign the return value to xEventBitsValue.
         */

        xEventBitsValue=xEventGroupWaitBits(xEventGroup,( EVENT_1_BIT | EVENT_2_BIT ),pdTRUE,pdTRUE,portMAX_DELAY);
        if( ( xEventBitsValue & EVENT_1_BIT ) != 0 )
        {
            UART0_SendString("Handler Task 2: Handling  event 1...\r\n" );
        }
        if( ( xEventBitsValue & EVENT_2_BIT ) != 0 )
        {
            UART0_SendString("Handler Task 2: Handling  event 2...\r\n" );
        }
    }
}
/*-----------------------------------------------------------*/
void ADC0SS0_HANDLER(void) {}
void ADC1SS0_HANDLER(void) {}
void GPIOPortF_Handler(void) {}
