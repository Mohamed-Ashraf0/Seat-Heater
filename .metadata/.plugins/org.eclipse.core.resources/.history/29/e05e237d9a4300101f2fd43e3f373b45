/**
 * main.c
 */
#include "FreeRTOS.h"
#include "task.h"
#include "event_groups.h"
#include "semphr.h"
#include "timers.h"
#include <stdint.h>
#include "uart0.h"
#include "adc0-1.h"
#include "GPTM.h"
#include "GPIO.h"

/**
 * @brief Definitions of event bits.
 */
#define EVENT_1_BIT ( 1UL << 0UL )
#define EVENT_2_BIT ( 1UL << 1UL )
/*-----------------------------------------------------------*/

/**
 * @brief Functions that implement FreeRTOS tasks.
 */
static void prvEventGeneratorTask( void * pvParams );
static void prvEventHandlerTask( void * pvParams );
/*-----------------------------------------------------------*/

/**
 * @brief Handle of the event handler task.
 */
static TaskHandle_t xEventHandlerTaskHandle = NULL;
/*-----------------------------------------------------------*/

/**
 * @brief Tutorial entry point.
 */
int main(void)
{
    UART0_Init();
    BaseType_t xTaskCreationResult = pdFAIL;

    xTaskCreationResult = xTaskCreate( prvEventGeneratorTask,
                                       "Generator",
                                       configMINIMAL_STACK_SIZE,
                                       NULL,
                                       tskIDLE_PRIORITY,
                                       NULL );
    configASSERT( xTaskCreationResult == pdPASS );

    xTaskCreationResult = xTaskCreate( prvEventHandlerTask,
                                       "Handler",
                                       configMINIMAL_STACK_SIZE,
                                       NULL,
                                       tskIDLE_PRIORITY + 1,
                                       &( xEventHandlerTaskHandle ) );
    configASSERT( xTaskCreationResult == pdPASS );


        vTaskStartScheduler();

    for(;;) {} // Should never reach here
}
/*-----------------------------------------------------------*/

static void prvEventGeneratorTask( void * pvParams )
{
    /* Silence warning about unused parameters. */
    ( void ) pvParams;
    TickType_t xLastWakeTime = xTaskGetTickCount();
    for( ;; )
    {
        UART0_SendString( "Generating event 1...\r\n" );

        /*
         * TODO 1 - Notify the event handler task about event 1 using
         * xTaskNotify API.
         *
         * Use the following values for xTaskNotify parameters:
         * xTaskToNotify    xEventHandlerTaskHandle
         * ulValue          EVENT_1_BIT
         * eAction          eSetBits
         */
        xTaskNotify(xEventHandlerTaskHandle,EVENT_1_BIT,eSetBits);

        vTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS( 500 ) );

        UART0_SendString( "Generating event 2...\r\n" );

        /*
         * TODO 2 - Notify the event handler task about event 2 using
         * xTaskNotify API.
         *
         * Use the following values for xTaskNotify parameters:
         * xTaskToNotify    xEventHandlerTaskHandle
         * ulValue          EVENT_2_BIT
         * eAction          eSetBits
         */

        xTaskNotify(xEventHandlerTaskHandle,EVENT_2_BIT,eSetBits);
        vTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS( 500 ) );

        UART0_SendString("Generated both events...\r\n" );
    }
}
/*-----------------------------------------------------------*/

static void prvEventHandlerTask( void * pvParams )
{
    uint32_t ulNotifiedValue;

    /* Silence warning about unused parameters. */
    ( void ) pvParams;

    for( ;; )
    {
        /*
         * TODO 3 - Wait for a task notification using xTaskNotifyWait API.
         *
         * Use the following values for xTaskNotifyWait parameters:
         * ulBitsToClearOnEntry     0
         * ulBitsToClearOnExit      ~0
         * pulNotificationValue     &( ulNotifiedValue )
         * xTicksToWait             portMAX_DELAY
         */

        xTaskNotifyWait(0, ~0,&( ulNotifiedValue ),portMAX_DELAY);
        if( ( ulNotifiedValue & EVENT_1_BIT ) != 0 )
        {
            UART0_SendString("Handling event 1...\r\n" );
        }

        if( ( ulNotifiedValue & EVENT_2_BIT ) != 0 )
        {
            UART0_SendString("Handling event 2...\r\n" );
        }
    }
}
/*-----------------------------------------------------------*/
void ADC0SS0_HANDLER(void) {}
void ADC1SS0_HANDLER(void) {}
void GPIOPortF_Handler(void) {}
