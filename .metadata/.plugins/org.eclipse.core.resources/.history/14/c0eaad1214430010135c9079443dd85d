/**
 * main.c
 */
#include "FreeRTOS.h"
#include "task.h"
#include "event_groups.h"
#include "semphr.h"
#include <stdint.h>
#include "uart0.h"
#include "adc0-1.h"
#include "GPTM.h"
#include "GPIO.h"

/* Static allocation for application task */
static void prvTaskFunction(void *pvParams);
static StaticTask_t xTaskTcbBuffer;
static StackType_t xTaskStackBuffer[configMINIMAL_STACK_SIZE];

/* Static allocation for Idle Task */
static StaticTask_t xIdleTaskTCB;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

/* Required function for static allocation */
void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
                                  StackType_t **ppxIdleTaskStackBuffer,
                                  uint32_t *pulIdleTaskStackSize)
{
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
    *ppxIdleTaskStackBuffer = xIdleStack;
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
}
void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,
                                    StackType_t **ppxTimerTaskStackBuffer,
                                    uint32_t *pulTimerTaskStackSize)
{
    static StaticTask_t xTimerTaskTCB;
    static StackType_t xTimerTaskStack[configTIMER_TASK_STACK_DEPTH];

    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
    *ppxTimerTaskStackBuffer = xTimerTaskStack;
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
}
int main(void)
{
    UART0_Init();
    TaskHandle_t xCreatedTaskHandle = NULL;

    xCreatedTaskHandle = xTaskCreateStatic(
        prvTaskFunction,            // Task function
        "Task1",                    // Task name
        configMINIMAL_STACK_SIZE,    // Stack size
        NULL,                       // Parameters
        tskIDLE_PRIORITY,           // Priority
        xTaskStackBuffer,           // Stack array
        &xTaskTcbBuffer);           // TCB buffer

    configASSERT(xCreatedTaskHandle != NULL);
    vTaskStartScheduler();

    for(;;) {} // Should never reach here
}

static void prvTaskFunction(void *pvParams)
{
    (void)pvParams;
    TickType_t xLastWakeTime = xTaskGetTickCount();

    for(;;) {
        UART0_SendString("task 1:- ");
        UART0_SendString(" \r\n\n**************************************\r\n\n");
        vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(1000));
    }
}

void ADC0SS0_HANDLER(void) {}
void ADC1SS0_HANDLER(void) {}
void GPIOPortF_Handler(void) {}
